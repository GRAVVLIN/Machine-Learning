import pandas as pd
import numpy as np
from functools import reduce

#import dataset
data = pd.read_csv('BL-Flickr-Images-Book.csv')

#pengecekan dataset
data.head()

#penghapusan kolon yang tidak digunakan
to_drop = ['Edition Statement',
           'Corporate Author',
           'Corporate Contributors',
           'Former owner',
           'Engraver',
           'Contributors',
           'Issuance type',
           'Shelfmarks']

data.drop(to_drop, inplace = True, axis = 1)

#pengecekan dataset yang tidak digunakan
data.head()

#menjadikan kolom tertrntu menjadi unique atau primary key
data.set_index('Identifier', inplace = True)

#pengecekan dataset ulang
data.head()

#pengecekan apakah berhasil menjadikan kolom tersebut menjadi index unique
data.loc[206]

#menampilkan kolom yang menggunakan unique dengan menampilkan 25 tdata teratas
data['Date of Publication'].head(25)

#membersihkan kolom dari simbol simbol agar data lebih proper
unwanted_characters = ['[', ',', '-']

def clean_dates(item):
    dop= str(item.loc['Date of Publication'])
    
    if dop == 'nan' or dop[0] == '[':
        return np.NaN
    
    for character in unwanted_characters:
        if character in dop:
            character_index = dop.find(character)
            dop = dop[:character_index]
    
    return dop

data['Date of Publication'] = data.apply(clean_dates, axis = 1)

#menampilkan ulang data yang telah dibersihkan
data.head()

#membersihkan kolom dari simbol simbol agar data lebih proper
unwanted_characters = ['[', ',', '-']

def clean_dates(dop):
    dop = str(dop)
    if dop.startswith('[') or dop == 'nan':
        return 'NaN'
    for character in unwanted_characters:
        if character in dop:
            character_index = dop.find(character)
            dop = dop[:character_index]
    return dop

data['Date of Publication'] = data['Date of Publication'].apply(clean_dates)

#pengecekan data yang telah dibersihkan
data.head()

#membersihkan kolom agar tidak ada nilai nan
def clean_author_names(author):
    
    author = str(author)
    
    if author == 'nan':
        return 'NaN'
    
    author = author.split(',')

    if len(author) == 1:
        name = filter(lambda x: x.isalpha(), author[0])
        return reduce(lambda x, y: x + y, name)
    
    last_name, first_name = author[0], author[1]

    first_name = first_name[:first_name.find('-')] if '-' in first_name else first_name
    
    if first_name.endswith(('.', '.|')):
        parts = first_name.split('.')
        
        if len(parts) > 1:
            first_occurence = first_name.find('.')
            final_occurence = first_name.find('.', first_occurence + 1)
            first_name = first_name[:final_occurence]
        else:
            first_name = first_name[:first_name.find('.')]
    
    last_name = last_name.capitalize()
    
    return f'{first_name} {last_name}'


data['Author'] = data['Author'].apply(clean_author_names)

#menampilkan data kembali setelah dibersihkan
data.head()

def clean_title(title):
    
    if title == 'nan':
        return 'NaN'
    
    if title[0] == '[':
        title = title[1: title.find(']')]
        
    if 'by' in title:
        title = title[:title.find('by')]
    elif 'By' in title:
        title = title[:title.find('By')]
        
    if '[' in title:
        title = title[:title.find('[')]

    title = title[:-2]
        
    title = list(map(str.capitalize, title.split()))
    return ' '.join(title)
    
data['Title'] = data['Title'].apply(clean_title)

#menampilkan data setelah dibersihkan
data.head()

#4157862 and 4159587
data.loc[4159587]

data.head()

#Data visualisasi pie chart
import matplotlib.pyplot as plt

plt.xlabel('Identifier')
plt.ylabel('Place of Publication')
plt.title('Visualisasi dengan histogram')
plt.show()

labels = ['A', 'B', 'C', 'D']
sizes = [15, 30, 45, 10] 
colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']
explode = (0, 0.1, 0, 0) 


plt.figure(figsize=(8, 8)) 
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140)
plt.axis('equal')
plt.title('Contoh Pie Chart')
plt.show()

labels = ['A', 'B', 'C', 'D']
values = [10, 30, 20, 25]  # Nilai untuk setiap kategori

# Membuat bar chart
plt.figure(figsize=(8, 6))  # Ukuran figure
plt.bar(labels, values, color='skyblue')
plt.xlabel('Kategori')
plt.ylabel('Nilai')
plt.title('Contoh Bar Chart')
plt.show()

x = [1, 2, 3, 4, 5]
y = [10, 15, 13, 18, 16]

# Membuat Line Graph
plt.figure(figsize=(8, 6))
plt.plot(x, y, marker='o', color='skyblue', linestyle='-')
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Contoh Line Graph')
plt.grid(True)
plt.show()

x = [1, 2, 3, 4, 5]
y = [10, 15, 13, 18, 16]

# Membuat Scatter Plot
plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='green', s=100, alpha=0.5)
plt.xlabel('X Axis Label')
plt.ylabel('Y Axis Label')
plt.title('Contoh Scatter Plot')
plt.grid(True)
plt.show()

import seaborn as sns

data = np.random.rand(10, 12)

# Membuat Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(data, cmap='coolwarm', annot=True)
plt.title('Contoh Heatmap')
plt.show()
